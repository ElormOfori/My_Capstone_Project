


KiddieRemind Backend (KidSync)

Project Overview
The KiddieRemind backend is built using Django and Django REST Framework (DRF) to provide authentication and user management for the KiddieRemind platform. The core functionality is implemented in the KidSync app, which handles user registration, login, and JWT-based authentication.

Tech Stack
Django – Python web framework for building the backend.
Django REST Framework (DRF) – For API development.
djangorestframework-simplejwt – For JWT authentication.
django-cors-headers – For handling cross-origin requests.

Project Structure
My_Capstone_Project/
│── KiddieRemind/  # Django Project
│── KidSync/       # Django App for authentication
│── manage.py      # Django management script
│── README.md      # Documentation

Setup and Installation
1. Clone the Repository
git clone git clone https://github.com/ElormOfori/My_Capstone_Project.git
cd My_Capstone_Project


2. Install Dependencies
pip install django djangorestframework django-cors-headers djangorestframework-simplejwt

4. Initialize Django Project
python3 -m django startproject KiddieRemind

5. Create Django App
python3 manage.py startapp KidSync

Configuration
Update settings.py
Add required apps:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'KidSync',
]

Enable CORS for frontend communication:
CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]

User Authentication
Custom User Model (KidSync/models.py)
from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    email = models.EmailField(unique=True)
    
    def __str__(self):
        return self.username

Set this model in settings.py:
AUTH_USER_MODEL = 'KidSync.User'

Migrations
python manage.py makemigrations KidSync
python manage.py migrate

API Endpoints
1. User Registration
Endpoint: POST /api/auth/register/
Request Body:
{
    "username": "testuser",
    "email": "test@example.com",
    "password": "password123"
}

Response:
{
    "id": 1,
    "username": "testuser",
    "email": "test@example.com"
}

2. User Login
Endpoint: POST /api/auth/login/
Request Body:
{
    "username": "testuser",
    "password": "password123"
}

Response:
{
    "refresh": "jwt_refresh_token_here",
    "access": "jwt_access_token_here"
}

Running the Server
python manage.py runserver

Push Changes to GitHub
git add .
git commit -m "Added authentication system"
git push origin main


Next Steps
Set up Task Management
Implement task filtering, sorting, and permissions.
Add notifications system.
Optimize performance, security, and edge cases.
Final testing, documentation, and deployment.

